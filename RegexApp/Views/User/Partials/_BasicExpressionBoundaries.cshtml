<div class="container">
    <div class="jumbotron">
        <h1>Expression Boundaries</h1>
        <p>Boundaries in regular expressions are markers that indicate specific positions in a text string where matches should be made. 
            Unlike anchors (<code>^</code> and <code>$</code>) that focus on the beginning and end of a line or string, 
            boundaries are used to identify locations where certain patterns should occur in relation to word boundaries, spaces, or non-matches..
        </p>
        <p>Expression Boundaries are markers that allow us to anchor patterns to specific positions in the text. We'll learn about their importance and how to use them.</p>

    </div>    
    <div class="row">
        <div class="col-md-12">
            <h2>
                Full word boundary: \b
            </h2>
            <p>
                The <code>\b</code> marker matches the position between a word character <code>\w</code> and a non-word character <code>\W</code>. 
                In other words, it matches the boundary between alphanumeric and non-alphanumeric characters. 
                This is commonly used to find whole words within a string.
                For example, the regular expression <code>\bapple\b</code> will match only the word "apple" as a complete word, 
                it will not match if "apple" is inside another word like "pineapples".
            </p>
            <h2>Example: Matching Whole Words</h2>
            <ul>
                <li><code>\bregex\b</code> matches "regex" but not "regexp", "regexion", etc.</li>
                <li><code>\bYuppi\b</code> matches "Yuppi" but not "Yuppink", "kyuppi", etc.</li>
                <li><code>\bnormal\b</code> matches "normal" but not "Paranormal", "normalization", etc.</li>
            </ul>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h2>
                Non-word boundary: \B
            </h2>
            <p>
                Unlike <code>\b</code>, <code>\B</code> matches any position in the string where there is no boundary between word and non-word characters. 
                It is used to search for patterns within words.
                For example, the regular expression <code>\Bar\B</code> will match "learning" and "warning" because "ar" appears in the middle of a word.
                But not "car" or "architect" because "ar" is not in the middle of the words.
            </p>
            <h2>Example: Matching within words</h2>
            <ul>
                <li><code>\bregex\b</code> matches within"TRregexX" but not "regexp", "myregex", etc.</li>
                <li><code>\bapple\b</code> matches "pineapples" but not "pineapple", "applepen", etc.</li>
                <li><code>\barc\b</code> matches "search" but not "architect", "marc", etc.</li>
            </ul>
        </div>
    </div>
</div>
